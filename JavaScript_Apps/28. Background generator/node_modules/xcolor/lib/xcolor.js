// Generated by CoffeeScript 1.4.0
var addStyle, clearStyles, convert, custom, format, fs, loadStyles, log, reset,
  __slice = [].slice;

fs = require('fs');

reset = require('./codes').reset;

convert = require('./convert');

custom = {};

format = function(str) {
  str = str.replace(/\{\{([\s\S]*?)\}\}/g, function(str, p1) {
    return convert(p1, custom);
  });
  str = str.replace(/(\&=[\S][\S])/g, function(str, p1) {
    return convert(p1, custom);
  });
  str = str.replace(/(\&\[?[+nN]?[?\S]?)/g, function(str, p1) {
    return convert(p1, custom);
  });
  if (!str.match(/\x1B\[0m$/)) {
    str = "" + str + reset;
  }
  return str;
};

addStyle = function(style) {
  var key, value, _results;
  if (style == null) {
    style = {};
  }
  _results = [];
  for (key in style) {
    value = style[key];
    _results.push(custom[key] = value);
  }
  return _results;
};

clearStyles = function() {
  return custom = {};
};

loadStyles = function(fileName) {
  var fileInput, key, value, _results;
  try {
    fileInput = JSON.parse(fs.readFileSync(fileName));
    _results = [];
    for (key in fileInput) {
      value = fileInput[key];
      _results.push(custom[key] = value);
    }
    return _results;
  } catch (error) {
    return error;
  }
};

log = function() {
  var args, input;
  input = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
  return console.log.apply(console, [format(input)].concat(__slice.call(args)));
};

module.exports = format;

module.exports.log = log;

module.exports.addStyle = addStyle;

module.exports.loadStyles = loadStyles;
