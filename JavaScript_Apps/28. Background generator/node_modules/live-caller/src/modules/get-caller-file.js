import isNode from 'detect-node'
import stackTrace from 'stack-trace'
import fs from 'fs'
import fse from 'fs-extra'
import StackTrace from 'stacktrace-js'
import os from 'os'
const isWindows = os.platform() === 'win32'

const DEFAULT_INDEX = 1

//
// Get callsite info for logging purposes.
// Used to log urls in terminal which will open the IDE with the file open.
//
// We use native Node.js functionality because it supports `source-map-support`.
//

export default function getCallerFile(index = 0) {
  if (isNode) {
    let err = new Error()
    const stack = stackTrace.parse(err)
    const line = stack[DEFAULT_INDEX + index]
    // TODO(vjpr): Handle the else case better. Check usages.
    const fileName = line.getFileName()
    const realpath = fse.existsSync(fileName) ? fse.realpathSync(fileName) : ''
    return {
      path: line.getFileName(),
      realpath,
      line: line.getLineNumber(),
      col: line.getColumnNumber(),
    }
  } else {
    // TODO(vjpr): Implement for browser. stackinfo is buggy. Use stacktrace.js.
    //return stackinfo()[INDEX]
    const stack = StackTrace.getSync()
    const line = stack[DEFAULT_INDEX + index]
    return {
      path: line.getFileName(),
      line: line.getLineNumber(),
      col: line.getColumnNumber(),
    }
  }
}
