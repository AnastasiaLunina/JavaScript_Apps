import StackTrace from 'stacktrace-js'
import Promise from 'bluebird'

const DEFAULT_INDEX = 1
const USE_OFFLINE_SOURCEMAPS = true

// Get stack trace info of a function call.
//
// * `index` {Number} The number of stack frames to look back.
//
export default async function getCallerFileAsync(index = 0) {
  let err = new Error()
  let stack
  // If we don't use a source cache, a request for `main|vendor.bundle.js.map` will be made every time this is called.
  // NOTE: When looking at server logs, remember that Chrome will make a request first.
  // See https://github.com/stacktracejs/stacktrace.js/blob/eb03054362624dc2f6a22672669866ba51c5381b/spec/stacktrace-spec.js#L78
  const sourceCache = window.__stacktracejsSourceCache__
  const stackTraceOpts = USE_OFFLINE_SOURCEMAPS
    ? {offline: true, sourceCache}
    : {offline: false}
  try {
    stack = await new Promise((resolve, reject) => {
      StackTrace.fromError(err, stackTraceOpts)
        .then(resolve, e => console.error('failed to get source maps:', e))
        .catch(reject)
    })
  } catch (e) {
    console.log('failed to get source maps:', e)
  }
  const line = stack[DEFAULT_INDEX + index]
  return {
    path: line.getFileName(),
    line: line.getLineNumber(),
    col: line.getColumnNumber(),
  }
}
