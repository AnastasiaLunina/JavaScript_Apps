import c from 'chalk'
import _ from 'lodash'

export {default as getCallerFileAsync} from 'modules/get-caller-file-async'
export {default as getCallerFile} from 'modules/get-caller-file'

//
// Remote Call IntelliJ Plugin
//

// Accepts fuzzy path, but browser window opens.
function remoteCallPlugin(info) {
  //const host = 's' // TODO: Add config option.
  const host = 'localhost'
  const message = `${info.addr}`.bold
  return `http://${host}:8091/?message=${message}`
}

//
// IntelliJ Native URL support
//

// Requires full file path, but no browser window opens.
function ideaProtocol(info, moduleName, opts) {
  if (!info) return '<no-path-found>'
  let file = info.path
  if (moduleName && file) {
    const path = require('path')
    moduleName = path.relative(process.cwd(), file)
    if (opts.color) file = file.replace(moduleName, c.bold(moduleName))
  }
  if (file) {
    // NOTE: Using col in IntelliJ seems to prevent it linking to correct line number.
    const col = info.col ? ':' + info.col : ''
    return `idea://open?file=${file}&line=${info.line}${col}`
    //return `idea://open?url=file://${call.path}&line=${call.line}:${call.col}`
  }
  return ''
}

// -----------------------------------------------------------------------------

export function makeIDELink(info, moduleName = true, opts = {}) {
  _.defaults(opts, {color: false})
  return ideaProtocol(info, moduleName, opts)
  //return remoteCallPlugin(info) // TODO: Add config option.
}

export function getIDELink(index = 0, opts = {}) {
  _.defaults(opts, {color: false})
  const CALLS = 1 // Calls until generated new Error is reached (see `callsite` module).
  const call = getCallerFile(CALLS + index)
  return makeIDELink(call, _, opts)
}

export function makeSourceLink(info) {
  if (!info) return
  // NOTE: If node_modules is symlinked, we probably want to show the
  // symlinked path, so that we can link to the original source's project
  // in our IDE.
  // TODO(vjpr): Maybe we should only follow symlinks inside a `node_modules` dir.
  const symlinked = (info.realpath !== info.path)
  let p = symlinked ? info.realpath : info.path
  return `${p}:${info.line}:${info.col}` + (symlinked ? ' (symlinked)' : '')
}

// TODO: Not in use. Remove.
//export function getCallerFileFromPrettyError(index = 3) {
//  const e = new Error
//  const liveError = require('live-error')
//  const pe = liveError.getParsedError(e)
//  const line = pe._trace[index]
//  return line
//}
