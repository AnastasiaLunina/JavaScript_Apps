'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getCallerFile = exports.getCallerFileAsync = undefined;

var _getCallerFileAsync = require('./modules/get-caller-file-async');

Object.defineProperty(exports, 'getCallerFileAsync', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getCallerFileAsync).default;
  }
});

var _getCallerFile = require('./modules/get-caller-file');

Object.defineProperty(exports, 'getCallerFile', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_getCallerFile).default;
  }
});
exports.makeIDELink = makeIDELink;
exports.getIDELink = getIDELink;
exports.makeSourceLink = makeSourceLink;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
// Remote Call IntelliJ Plugin
//

// Accepts fuzzy path, but browser window opens.
function remoteCallPlugin(info) {
  //const host = 's' // TODO: Add config option.
  var host = 'localhost';
  var message = ('' + info.addr).bold;
  return 'http://' + host + ':8091/?message=' + message;
}

//
// IntelliJ Native URL support
//

// Requires full file path, but no browser window opens.
function ideaProtocol(info, moduleName, opts) {
  if (!info) return '<no-path-found>';
  var file = info.path;
  if (moduleName && file) {
    var path = require('path');
    moduleName = path.relative(process.cwd(), file);
    if (opts.color) file = file.replace(moduleName, _chalk2.default.bold(moduleName));
  }
  if (file) {
    // NOTE: Using col in IntelliJ seems to prevent it linking to correct line number.
    var col = info.col ? ':' + info.col : '';
    return 'idea://open?file=' + file + '&line=' + info.line + col;
    //return `idea://open?url=file://${call.path}&line=${call.line}:${call.col}`
  }
  return '';
}

// -----------------------------------------------------------------------------

function makeIDELink(info) {
  var moduleName = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  _lodash2.default.defaults(opts, { color: false });
  return ideaProtocol(info, moduleName, opts);
  //return remoteCallPlugin(info) // TODO: Add config option.
}

function getIDELink() {
  var index = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  _lodash2.default.defaults(opts, { color: false });
  var CALLS = 1; // Calls until generated new Error is reached (see `callsite` module).
  var call = getCallerFile(CALLS + index);
  return makeIDELink(call, _lodash2.default, opts);
}

function makeSourceLink(info) {
  if (!info) return;
  // NOTE: If node_modules is symlinked, we probably want to show the
  // symlinked path, so that we can link to the original source's project
  // in our IDE.
  // TODO(vjpr): Maybe we should only follow symlinks inside a `node_modules` dir.
  var symlinked = info.realpath !== info.path;
  var p = symlinked ? info.realpath : info.path;
  return p + ':' + info.line + ':' + info.col + (symlinked ? ' (symlinked)' : '');
}

// TODO: Not in use. Remove.
//export function getCallerFileFromPrettyError(index = 3) {
//  const e = new Error
//  const liveError = require('live-error')
//  const pe = liveError.getParsedError(e)
//  const line = pe._trace[index]
//  return line
//}
//# sourceMappingURL=index.js.map
