import _ from 'lodash'
const EventEmitter = require('eventemitter3')
import {
  getBrowserConfigPath, getServerConfigPath, getConfig
} from './get-root-config'

export class Config {

  // TODO(vjpr)
  //globalSchema = {properties: {}};

  constructor() {
    this.vent = new EventEmitter
    // Singleton config.
    // TODO(vjpr): get rid of this. It's bad to cache config here. For wallaby and more.
    this.config = getConfig(this.vent)
    this.env = new EnvironmentHelpers
  }

  get(...args) {
    return _.get(this.config, ...args)
  }

  set(key, newValue) {
    _.set(this.config[key], newValue)
  }

  setDefaults(namespace, keyToSchema) {
    // TODO(vjpr): We want to validate schemas eventually.
    //   For now, we just use the default value.
    const keyToDefaultVal = _(keyToSchema).mapValues((v, k) => v.default).value()
    return _.defaultsDeep(this.config, {[namespace]: keyToDefaultVal})
  }

  //
  // Util
  //

  getBrowserConfigPath() { return getBrowserConfigPath() }

  getServerConfigPath() { return getServerConfigPath() }

  print() {
    // TODO(vjpr): Print linkable file location of where the caller of this method is.
    const pj = require('prettyjson')
    console.log(pj.render(this.config))
  }

}

class EnvironmentHelpers {

  isDev() {
    // TODO(vjpr): Use implementation from webpackerator.
    return process.env.NODE_ENV !== 'production'
  }

}

////////////////////////////////////////////////////////////////////////////////
// Singleton API
////////////////////////////////////////////////////////////////////////////////

// The api is designed to have good compatibility with CommonJS requires.

let singleton = new Config

// TODO(vjpr): require.main.require('configurize') to ensure only one version is used.

// Usage:
//
//   import {config} from 'configurize'
//   config.get('foo')
//
//   const {config} = require('configurize')
//   config.get('foo')
//
//   require('configurize').config.get('foo')
//
//   import * as configurize from 'configurize'
//   configurize.config.get('foo')
//
//
export {singleton as config}

// Usage:
//
//   import config from 'configurize'
//   config.get('foo')
//
//   import {default as config} from 'configurize'
//   config.get('foo'
//
//   const {default: config} = require('configurize')
//   config.get('foo')
//
//   require('configurize').default.get('foo')
//
export default singleton

// NOTE: This would override all our exports.
//module.exports = singleton

////////////////////////////////////////////////////////////////////////////////
