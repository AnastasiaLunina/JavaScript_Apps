import _ from 'lodash'
import fs from 'fs'
import path from 'path'
//import Debug from 'debug'
//const debug = Debug('configurize:get-root-config')

export function getConfig(vent) {
  let {module, file} = getConfigModule()
  const rootConf = parseConfig(module)
  vent.emit('root-config', rootConf, file)
  return rootConf || {}
}

const toolsDir = 'tools'

function getConfigModule() {
  let file
  let module
  // TODO(vjpr): Check this don't break nothing!
  //   We might have to add it to webpack config.
  if (global.__CLIENT__ === true) {
    // TODO(vjpr): This method is only for server-side.
    // file = getBrowserConfigPath()
    // module = require(file)
    module = require('configurize.browser.js')
  } else {
    file = getServerConfigPath()
    module = fs.existsSync(file) ? require(file) : null
  }
  return {file, module}
}

function parseConfig(module) {
  const opts = {}
  return _.isFunction(module) ? module(opts) : module
}

// TODO(vjpr): Use the strategy that webpackerator and babelator use for finding the config path.
export function getServerConfigPath() {

  if (global.__CLIENT__ !== true) {

    const envPath = process.env.CONFIGURIZE_CONFIG_PATH
    if (_.get(process, 'versions.electron')) {
      // NOTE: require('electron') will only exist in an Electron app.
      return envPath || path.join(require('electron').app
          .getAppPath(), toolsDir, '.configurize.js')
    } else {
      const cwd = require('cwd')
      return envPath || cwd(toolsDir, '.configurize.js')
    }

  }

}

// NOTE: This is for server-side usage for generating our webpack config.
export function getBrowserConfigPath() {
  const cwd = require('cwd')
  return require.resolve(process.env.CONFIGURIZE_BROWSER_CONFIG_PATH || cwd(toolsDir, '.configurize.browser.js'))
}
