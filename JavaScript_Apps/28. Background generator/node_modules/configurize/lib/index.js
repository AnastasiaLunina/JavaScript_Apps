'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.config = exports.Config = undefined;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _getRootConfig = require('./get-root-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventEmitter = require('eventemitter3');

var Config = exports.Config = function () {

  // TODO(vjpr)
  //globalSchema = {properties: {}};

  function Config() {
    (0, _classCallCheck3.default)(this, Config);

    this.vent = new EventEmitter();
    // Singleton config.
    // TODO(vjpr): get rid of this. It's bad to cache config here. For wallaby and more.
    this.config = (0, _getRootConfig.getConfig)(this.vent);
    this.env = new EnvironmentHelpers();
  }

  (0, _createClass3.default)(Config, [{
    key: 'get',
    value: function get() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _lodash2.default.get.apply(_lodash2.default, [this.config].concat(args));
    }
  }, {
    key: 'set',
    value: function set(key, newValue) {
      _lodash2.default.set(this.config[key], newValue);
    }
  }, {
    key: 'setDefaults',
    value: function setDefaults(namespace, keyToSchema) {
      // TODO(vjpr): We want to validate schemas eventually.
      //   For now, we just use the default value.
      var keyToDefaultVal = (0, _lodash2.default)(keyToSchema).mapValues(function (v, k) {
        return v.default;
      }).value();
      return _lodash2.default.defaultsDeep(this.config, (0, _defineProperty3.default)({}, namespace, keyToDefaultVal));
    }

    //
    // Util
    //

  }, {
    key: 'getBrowserConfigPath',
    value: function getBrowserConfigPath() {
      return (0, _getRootConfig.getBrowserConfigPath)();
    }
  }, {
    key: 'getServerConfigPath',
    value: function getServerConfigPath() {
      return (0, _getRootConfig.getServerConfigPath)();
    }
  }, {
    key: 'print',
    value: function print() {
      // TODO(vjpr): Print linkable file location of where the caller of this method is.
      var pj = require('prettyjson');
      console.log(pj.render(this.config));
    }
  }]);
  return Config;
}();

var EnvironmentHelpers = function () {
  function EnvironmentHelpers() {
    (0, _classCallCheck3.default)(this, EnvironmentHelpers);
  }

  (0, _createClass3.default)(EnvironmentHelpers, [{
    key: 'isDev',
    value: function isDev() {
      // TODO(vjpr): Use implementation from webpackerator.
      return process.env.NODE_ENV !== 'production';
    }
  }]);
  return EnvironmentHelpers;
}();

////////////////////////////////////////////////////////////////////////////////
// Singleton API
////////////////////////////////////////////////////////////////////////////////

// The api is designed to have good compatibility with CommonJS requires.

var singleton = new Config();

// TODO(vjpr): require.main.require('configurize') to ensure only one version is used.

// Usage:
//
//   import {config} from 'configurize'
//   config.get('foo')
//
//   const {config} = require('configurize')
//   config.get('foo')
//
//   require('configurize').config.get('foo')
//
//   import * as configurize from 'configurize'
//   configurize.config.get('foo')
//
//
exports.config = singleton;

// Usage:
//
//   import config from 'configurize'
//   config.get('foo')
//
//   import {default as config} from 'configurize'
//   config.get('foo'
//
//   const {default: config} = require('configurize')
//   config.get('foo')
//
//   require('configurize').default.get('foo')
//

exports.default = singleton;

// NOTE: This would override all our exports.
//module.exports = singleton

////////////////////////////////////////////////////////////////////////////////
//# sourceMappingURL=index.js.map
