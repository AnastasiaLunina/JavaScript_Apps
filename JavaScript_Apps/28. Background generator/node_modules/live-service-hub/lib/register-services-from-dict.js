'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

exports.default = function (_ref) {
  var serviceHub = _ref.serviceHub,
      services = _ref.services,
      module = _ref.module,
      modulePath = _ref.modulePath;


  if (!services) return;

  // TODO(vjpr): `this` is not working inside named functions. WTF.
  //   Maybe a old buggy babel version.

  var consumers = function consumers(obj) {
    for (var keyPath in obj) {
      var versionToFnName = obj[keyPath];
      for (var version in versionToFnName) {
        var fnNameOrFn = versionToFnName[version];
        var consumerCallback = _lodash2.default.isFunction(fnNameOrFn) ? fnNameOrFn : module[fnNameOrFn];
        if (!consumerCallback) {
          throw new Error('Consumer callback method \'' + fnNameOrFn + '\' not found on module \'' + modulePath + '\'. Using version dict: ' + (0, _stringify2.default)(versionToFnName) + '.');
        }
        consumerCallback = consumerCallback.bind(module);
        // TODO(vjpr): Instrument consumerCallback for logging.
        serviceHub.consume(keyPath, version, consumerCallback);
      }
    }
  };

  var providers = function providers(obj) {
    for (var keyPath in obj) {
      var versionToFnName = obj[keyPath];
      _checkTypes2.default.object(versionToFnName);
      for (var version in versionToFnName) {
        var fnNameOrFn = versionToFnName[version];
        var serviceGetter = _lodash2.default.isFunction(fnNameOrFn) ? fnNameOrFn : module[fnNameOrFn];
        // TODO(vjpr): Check if they made a mistake by not passing in an object (if they left out version from a provide).
        //   General validation needed.
        if (!serviceGetter) {
          throw new Error('Service getter method \'' + fnNameOrFn + '\' not found on module \'' + modulePath + '\'. Using version dict: ' + (0, _stringify2.default)(versionToFnName) + '.');
        }
        serviceGetter = serviceGetter.bind(module);
        (0, _zog.debug)('Initializing provider service', keyPath, version);
        var service = serviceGetter();
        if (!service) {
          throw new Error('Service getter method \'' + fnNameOrFn + '\' on module \'' + modulePath + '\' did not return anything. Using version dict: ' + (0, _stringify2.default)(versionToFnName) + '.');
        }
        serviceHub.provide(keyPath, version, service);
      }
    }
  };

  if (services.consume) consumers(services.consume);
  if (services.provide) providers(services.provide);
};

var _checkTypes = require('check-types');

var _checkTypes2 = _interopRequireDefault(_checkTypes);

var _zog = require('zog');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = exports['default'];

// serviceHub - A LiveServiceHub instance.
// services - Dictionary of service names to consume and provide.
//   {consume, provide}
// module - Service names from the `services` dict correspond to function names
//   on this object.
//# sourceMappingURL=register-services-from-dict.js.map
