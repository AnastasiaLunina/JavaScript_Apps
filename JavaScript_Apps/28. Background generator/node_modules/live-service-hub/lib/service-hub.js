'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _eventKit = require('event-kit');

var _consumer = require('./consumer');

var _consumer2 = _interopRequireDefault(_consumer);

var _provider = require('./provider');

var _provider2 = _interopRequireDefault(_provider);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var debug = require('debug')('service-hub');

var ServiceHub = function () {
  function ServiceHub() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, ServiceHub);

    this.opts = opts;
    this.consumers = [];
    this.providers = [];
    this.consumeQueue = [];
  }

  // Public: Provide a service by invoking the callback of all current and future
  // consumers matching the given key path and version range.
  //
  // * `keyPath` A {String} of `.` separated keys indicating the services's
  //   location in the namespace of all services.
  // * `version` A {String} containing a [semantic version](http://semver.org/)
  //   for the service's API.
  // * `service` An object exposing the service API.
  //
  // Returns a {Disposable} on which `.dispose()` can be called to remove the
  // provided service.


  (0, _createClass3.default)(ServiceHub, [{
    key: 'provide',
    value: function provide(keyPath, version, service) {
      var _this = this;

      var servicesByVersion = {};
      if (service != null) {
        servicesByVersion[version] = service;
      } else {
        servicesByVersion = version;
      }

      var provider = new _provider2.default(keyPath, servicesByVersion);
      this.providers.push(provider);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(this.consumers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var consumer = _step.value;

          if (!consumer.isDestroyed) {
            provider.provide(consumer);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new _eventKit.Disposable(function () {
        provider.destroy();
        var index = _this.providers.indexOf(provider);
        return _this.providers.splice(index, 1);
      });
    }

    // Public: Consume a service by invoking the given callback for all current
    // and future provided services matching the given key path and version range.
    //
    // * `keyPath` A {String} of `.` separated keys indicating the services's
    //   location in the namespace of all services.
    // * `versionRange` A {String} containing a [semantic version range](https://www.npmjs.org/doc/misc/semver.html)
    //   that any provided services for the given key path must satisfy.
    // * `callback` A {Function} to be called with current and future matching
    //   service objects.
    //
    // Returns a {Disposable} on which `.dispose()` can be called to remove the
    // consumer.

  }, {
    key: 'consume',
    value: function consume(keyPath, versionRange, callback) {
      var _this2 = this;

      var consumer = new _consumer2.default(keyPath, versionRange, callback);

      var consumeFn = function consumeFn() {
        _this2.consumers.push(consumer);
        if (!consumer.isDestroyed) {
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = (0, _getIterator3.default)(_this2.providers), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var provider = _step2.value;

              if (!provider.isDestroyed) {
                provider.provide(consumer);
              }
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      };

      if (!this.opts.runOnConsume) {
        // TODO(vjpr): Currently modules can only be wired up once.
        // TODO(vjpr): Use GroupedQueue.
        // TODO(vjpr): Allow promises for service providers.
        this.consumeQueue.push(consumeFn);
      } else {
        consumeFn();
        // TODO(vjpr): Using nextTick stopped working in Node 6.5 for some strange reason.
        //   This needs more thinking and a proper solution.
        //process.nextTick(() => {
        //  //this.run()
        //  consumeFn()
        //})
      }

      return new _eventKit.Disposable(function () {
        consumer.destroy();
        var index = _this2.consumers.indexOf(consumer);
        if (index >= 0) {
          return _this2.consumers.splice(index, 1);
        }
      });
    }
  }, {
    key: 'run',
    value: function run() {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {

        for (var _iterator3 = (0, _getIterator3.default)(this.consumeQueue), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var fn = _step3.value;

          fn();
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.consumeQueue = [];
    }

    // Public: Clear out all service consumers and providers, disposing of any
    // disposables returned by previous consumers.

  }, {
    key: 'clear',
    value: function clear() {
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = (0, _getIterator3.default)(this.providers), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          var provider = _step4.value;

          provider.destroy();
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      this.providers = [];
      return this.consumers = [];
    }
  }]);
  return ServiceHub;
}();

exports.default = ServiceHub;
module.exports = exports['default'];
//# sourceMappingURL=service-hub.js.map
