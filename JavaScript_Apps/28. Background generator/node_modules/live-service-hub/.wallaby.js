//module.exports = require('babelator/defaults/wallaby')

var babelator = require('babelator/config')()
var testsGlob = babelator.testsGlob
var testsHelpersGlob = babelator.testsHelpersGlob
var srcGlob = babelator.srcGlob

module.exports = function(wallaby) {
  return {
    reportConsoleErrorAsError: false,
    debug: false,
    files: [
      srcGlob,
      {pattern: testsGlob, ignore: true},
      //{pattern: 'src/__tests__/makeGeneratorUnitTest.js'},
      {pattern: 'src/__tests__/bootstrap.js'},
      {pattern: '.drumrc', instrument: false},
    ],
    tests: [
      testsGlob,
      //{pattern: testsHelpersGlob, ignore: true}
    ],
    compilers: {
      '**/*.js': wallaby.compilers.babel({
        //babel: require('../requires').babelCore,
        babel: require('babel-core'),
        babelrc: true,
        //plugins: babelator.babel.plugins,
        //presets: babelator.babel.presets,
        //presets: ['live'],
      }),
    },
    testFramework: 'mocha',
    env: {
      type: 'node',
      //runner: '/Users/Vaughan/nvm/versions/node/v0.12.7/bin/node',
      params: {
        runner: '--harmony',
      },
    },
    delays: {
      edit: 500, // Default
      run: 150, // Default
    },
    bootstrap: function() {
      const debug = require('debug')
      debug.log = console.log.bind(console)
      var mocha = wallaby.testFramework

      // mocha.suite.beforeAll(function () {
      //   console.log('beforeAll')
      // })
      // mocha.suite.afterAll(function () {
      //   console.log('afterAll')
      // })

      var chai = require('babelator/requires').chai
      var chaiAsPromised = require('babelator/requires').chaiAsPromised
      global.sinon = require('sinon')
      chai.use(require('sinon-chai'))
      chai.use(chaiAsPromised)
      mocha.ui('bdd')
      expect = chai.expect
      var should = chai.should()
      // Use src because wallaby.js takes care of transpilation.
      // TODO(vjpr): Sync with babelator `opts.mocha.r`.
      require('./src/__tests__/bootstrap.js')
    },
  }
}
