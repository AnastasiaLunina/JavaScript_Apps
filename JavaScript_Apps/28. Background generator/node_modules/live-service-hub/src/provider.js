import {CompositeDisposable} from 'event-kit'
import semver from 'semver'
import _ from 'lodash'
import {debug} from 'zog'

export default class Provider {
  
  constructor(keyPath, servicesByVersion) {
    this.isDestroyed = false
    this.consumersDisposable = new CompositeDisposable()
    this.servicesByVersion = {}
    for (const version in servicesByVersion) {
      let service = servicesByVersion[version]
      this.servicesByVersion[version] = {}
      _.set(this.servicesByVersion[version], keyPath, service)
    }
  }

  provide(consumer) {
    let iterable = Object.keys(this.servicesByVersion).sort(semver.rcompare)
    for (const version of iterable) {
      if (semver.satisfies(version, consumer.versionRange)) {
        let value
        if (value = _.get(this.servicesByVersion[version], consumer.keyPath)) {
          debug('Consuming service', consumer.keyPath, version)
          let consumerDisposable = consumer.callback.call(null, value)
          if (consumerDisposable && _.isFunction(consumerDisposable.dispose)) {
            this.consumersDisposable.add(consumerDisposable)
          }
          return
        }
      }
    }
  }

  destroy() {
    this.isDestroyed = true
    return this.consumersDisposable.dispose()
  }
}

