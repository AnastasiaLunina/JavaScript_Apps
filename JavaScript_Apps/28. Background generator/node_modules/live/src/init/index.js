// Start timing server startup time asap.
global.liveStartTime = new Date
const {log} = require('zog')
log('Starting Live app...')

const _ = require('lodash')
import {config} from 'configurize'

function getOpts(opts) {
  return _.defaultsDeep(opts, {
    moduleDirectories: config.get('live.moduleDirectories', []),
    globals: config.get('live.globals', {}),
    configurePromises: true,
  })
}

////////////////////////////////////////////////////////////////////////////////

module.exports = function(opts = {}) {

  opts = getOpts(opts)

  ////////////////////////////////////////////////////////////////////////////////
  // Promises
  ////////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__ && opts.configurePromises)
    require('./promises')()

  //////////////////////////////////////////////////////////////////////////////
  // NODE_PATH
  //////////////////////////////////////////////////////////////////////////////

  if (!global.__CLIENT__) {
    const addPath = require('app-module-path').addPath
    opts.moduleDirectories.map((dir) => {
      addPath(dir)
    })
  }

  //////////////////////////////////////////////////////////////////////////////
  // Module aliases
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr)

  // Globals
  //////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__) {
    // NOTE: In webpack config if `node.global = 'window'` then `window` will also be `global`.
    _(opts.globals).forEach((v, k) => { window[k] = v })
  } else {
    _(opts.globals).forEach((v, k) => { global[k] = v })
  }

  // TODO(vjpr)

  //////////////////////////////////////////////////////////////////////////////
  // Skip style requires when server side.
  //////////////////////////////////////////////////////////////////////////////

  // TODO(vjpr): Use style collector and serve css.
  if (!global.__CLIENT__) require.extensions['.less'] = function() { return null }
  if (!global.__CLIENT__) require.extensions['.css'] = function() { return null }

  //////////////////////////////////////////////////////////////////////////////
  // Unhandled promises
  //////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__) {

    // TODO(vjpr): Super bad makes errors impossible to read in the browser. Don't preventDefault.

    // See ./promises.js
    //window.addEventListener('unhandledrejection', function(e) {
    //  e.preventDefault()
    //  const {reason, promise} = e.detail
    //  console.log({reason})
    //  console.log(e.stack)
    //})

  } else {

    // Capture unhandler promise rejections.
    // NOTE: Requires io.js or core-js.
    process.on('unhandledRejection', function(e, promise) {
      console.log(e.stack)
    })

  }

  //////////////////////////////////////////////////////////////////////////////
  // Babel
  //////////////////////////////////////////////////////////////////////////////

  if (global.__CLIENT__ === false && global.__LIVE_DISABLE_BABEL__ == false) {
    require('./roadrunner')
    require('babel-register')(_.clone(opts.babel))
    require('babel-polyfill')
  }

  // Enable to save cached roadrunner after server starts and *most* of the dependencies
  // have been loaded.
  //require('./roadrunner').saveRequireResolveCache()

}
