const log = require('debug')('live:plugin-locator')
import globby from 'globby'
import _ from 'lodash'

// Used by node.js and browser.
class PluginLocator {

  constructor(opts = {}) {

    this.opts = _.defaults({}, opts, {
      exts: ['json', 'cson', 'js'],
      folders: ['node_modules', 'modules'],
      //files: ['live.browser', 'live.shared', 'live'],
      files: ['live.shared', 'live'],
      rootDir: process.cwd(),
    })
  }

  getGlob() {
    const files = this.opts.files.join('|')
    const dirs = this.opts.folders.join('|')
    const exts = this.opts.exts.join('|')
    // TODO(vjpr): Shouldn't rely on root dir. Should use absolute search paths. Why don't we?
    // Globby supports multiple patterns.
    return this.opts.rootDir + `/@(${dirs})/*/@(${files}).@(${exts})`
  }

  locate() {
    log('Looking for Live plugins with the following glob:-')
    log(this.getGlob())
    const paths = globby.sync(this.getGlob())
    return paths
  }

}

const main = (opts) => new PluginLocator(opts).locate()

main.PluginLocator = PluginLocator

module.exports = main
