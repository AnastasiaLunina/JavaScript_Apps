'use strict';

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _logging = require('./logging');

var _logging2 = _interopRequireDefault(_logging);

var _live = require('./live');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locator = require('./locator');


// Singleton app instance.
var live = new _live.Live();

// Setup basic logging.
(0, _logging2.default)(live.container

// Singleton app instance.
// E.g. When using `import {live} from 'live-app'` syntax to access the app.
);main.live = live;

main.Live = _live.Live;
main.Locator = locator.Locator;

module.exports = main;

////////////////////////////////////////////////////////////////////////////////

function getOpts(opts) {
  return _lodash2.default.defaults(opts, {
    beforeStart: function beforeStart(live) {},
    locator: {},
    // TODO(vjpr): Look at how webpack does it.
    modules: { enabled: null, disabled: null }
  });
}

// opts.fn - an easy way to add hooks without creating a module.
function main(opts) {

  opts = getOpts(opts

  // Locate and register plugins.

  );if (!global.__CLIENT__) {
    locator(opts.locator).map(function (file) {
      if (shouldExcludeModule(file, opts.modules)) return;
      var module = require(file);
      live.register(module, file);
    });
  } else {
    (0, _keys2.default)(window.livePlugins).map(function (file) {
      if (shouldExcludeModule(file, opts.modules)) return;
      var module = window.livePlugins[file];
      live.register(module, file);
    });
  }

  opts.beforeStart(live

  // Start app.

  );live.start().then(function () {
    // App has now started.
  });

  return live;
}

// TODO(vjpr): Similar function can be found in `pluginLoader`. They should be in sync. However...rule of three refactoring!
function getModuleName(file) {
  var path = require('path');
  var moduleName = path.basename(path.dirname(file) // TODO: Double check this works for webpack - context.keys()! Maybe we can get more info from the context.)
  );return moduleName;
}

function shouldExcludeModule(file, _ref) {
  var enabled = _ref.enabled,
      disabled = _ref.disabled;

  var moduleName = getModuleName(file);
  if (enabled) {
    return !_lodash2.default.includes(enabled, moduleName);
  } else if (disabled) {
    return _lodash2.default.includes(disabled, moduleName);
  } else {
    return false;
  }
}
//# sourceMappingURL=index.js.map
