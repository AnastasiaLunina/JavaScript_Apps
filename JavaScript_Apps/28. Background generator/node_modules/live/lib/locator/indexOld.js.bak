import glob from 'glob'
import pathToRegexp from 'path-to-regexp'
import _ from 'lodash'
import path from 'path'
import fs from 'fs'

// TODO(vjpr): Get rid of configs! Should not be here.

const cache = {}

const liverc = path.join(process.cwd(), '.liverc')

let config = {}
if (fs.existsSync(liverc)) {
  config = require(liverc)
}

// TODO(vjpr): Refactor to usage example and add tests.
module.exports = function(opts = {}) {

  //if (_.isEmpty(opts)) {
  //
  //  console.log('TODO')
  //
  //} else {

  //
  // Legacy interface.
  //

  const {browser, browserConfigs, browserRootConfigs, configs, rootConfigs, cli, cliBrowser} = opts

  const rootDir = config.rootDir

  const dirs = getLiveModuleDirectories()

  const globDirs = dirs.join('|')
  let exts = ['json', 'cson', 'js'].join('|')

  let g
  if (browser) {
    g = rootDir + `/@(${globDirs})/*/@(live.browser|live.shared).@(${exts})`
  } else if (browserConfigs) {
    // TODO: Use globby instead.
    g = rootDir + `/@(${globDirs})/*/config/*@(.browser|.shared).@(${exts})`
  } else if (browserRootConfigs) {
    // TODO: Use globby instead.
    g = rootDir + `/config/*@(.browser|.shared).@(${exts})`
  } else if (configs) {
    g = rootDir + `/@(${globDirs})/*/config/*.@(${exts})`
  } else if (rootConfigs) {
    g = rootDir + `/config/*.@(${exts})`
  } else if (cli) {
    g = rootDir + `/@(${globDirs})/*/@(live.cli|live.cli.shared).@(${exts})`
  } else if (cliBrowser) {
    // TODO: cli in the browser.
  } else {
    g = rootDir + `/@(${globDirs})/*/@(live|live.shared).@(${exts})`
  }

  return glob.sync(g, {cache, debug: false})

  //}

}

// This doesn't belong here.
function getLiveModuleDirectories() {

  const liveModuleDirectories = _.get(config, 'liveLocator.liveModuleDirectories')
  const rootDir = config.rootDir

  return _(liveModuleDirectories).map((d) => {
    if (path.isAbsolute(d)) {
      const p = path.relative(d, rootDir)
      //return p === '' ? '*' : p
      return ''
    }
    return d
  }).value()

}
