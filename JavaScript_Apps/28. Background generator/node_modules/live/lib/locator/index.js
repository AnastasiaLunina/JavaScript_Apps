'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var log = require('debug')('live:plugin-locator');

// Used by node.js and browser.
var PluginLocator = function () {
  function PluginLocator() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, PluginLocator);


    this.opts = _lodash2.default.defaults({}, opts, {
      exts: ['json', 'cson', 'js'],
      folders: ['node_modules', 'modules'],
      //files: ['live.browser', 'live.shared', 'live'],
      files: ['live.shared', 'live'],
      rootDir: process.cwd()
    });
  }

  (0, _createClass3.default)(PluginLocator, [{
    key: 'getGlob',
    value: function getGlob() {
      var files = this.opts.files.join('|');
      var dirs = this.opts.folders.join('|');
      var exts = this.opts.exts.join('|'
      // TODO(vjpr): Shouldn't rely on root dir. Should use absolute search paths. Why don't we?
      // Globby supports multiple patterns.
      );return this.opts.rootDir + ('/@(' + dirs + ')/*/@(' + files + ').@(' + exts + ')');
    }
  }, {
    key: 'locate',
    value: function locate() {
      log('Looking for Live plugins with the following glob:-');
      log(this.getGlob());
      var paths = _globby2.default.sync(this.getGlob());
      return paths;
    }
  }]);
  return PluginLocator;
}();

var main = function main(opts) {
  return new PluginLocator(opts).locate();
};

main.PluginLocator = PluginLocator;

module.exports = main;
//# sourceMappingURL=index.js.map
