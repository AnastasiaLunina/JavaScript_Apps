'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Logger = exports.logger = exports.Debug = exports.line = exports.c = exports.xc = exports.xcolor = exports.timeEnd = exports.time = exports.error = exports.warn = exports.debug = exports.log = exports.info = exports.Console = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _class;

var _xcolor = require('xcolor');

Object.defineProperty(exports, 'xcolor', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xcolor).default;
  }
});
Object.defineProperty(exports, 'xc', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_xcolor).default;
  }
});

var _chalk = require('chalk');

Object.defineProperty(exports, 'c', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_chalk).default;
  }
});

var _chalkline = require('chalkline');

Object.defineProperty(exports, 'line', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_chalkline).default;
  }
});

var _debug = require('debug');

Object.defineProperty(exports, 'Debug', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_debug).default;
  }
});

var _debug2 = _interopRequireDefault(_debug);

var _chalk2 = _interopRequireDefault(_chalk);

var _liveCaller = require('live-caller');

var _logCallsite = require('./log-callsite');

var _logCallsite2 = _interopRequireDefault(_logCallsite);

var _coreDecorators = require('core-decorators');

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _tildify = require('tildify');

var _tildify2 = _interopRequireDefault(_tildify);

var _detectNode = require('detect-node');

var _detectNode2 = _interopRequireDefault(_detectNode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Console = console;

var debugCache = {};

// TODO(vjpr): Should be configurable.
// NOTE: We don't need to make a special ide link if using iTerm2.
var useIdeLink = false;

function getLoggerName(callInfo) {
  var path = callInfo.path;
  var line = callInfo.line;
  var col = callInfo.col;
  // TODO(vjpr): Make relative from source dir but remember its used client side too.
  // TODO(vjpr): Check if path is null.

  return path.split('/').slice(-2).join('/');
  //return path.relative(process.cwd(), path)
}

function getDebugModule(callInfo) {
  var path = callInfo.path;
  var line = callInfo.line;
  var col = callInfo.col;

  var loggerName = getLoggerName(callInfo);
  if (!debugCache[path]) debugCache[path] = (0, _debug2.default)(loggerName);
  return debugCache[path];
}

// Uncomment to track to spurious console.log calls.
//logCallsite.hookConsoleLog()

//const test = {
//  a: 1,
//  b: 2
//}
//
//function yo() {
//
//  }

var Logger = (0, _coreDecorators.autobind)(_class = function () {

  // debug module doesn't work if its an empty string.
  function Logger() {
    var ns = arguments.length <= 0 || arguments[0] === undefined ? 'default' : arguments[0];
    (0, _classCallCheck3.default)(this, Logger);
    this._ns = '';

    this._ns = ns;
    this.logger = (0, _debug2.default)(ns);

    //this.logger.log = console.log.apply(console, arguments)
    //this.logger = console.log
  }

  (0, _createClass3.default)(Logger, [{
    key: 'ns',
    value: function ns(_ns) {
      this._ns = _ns;
      return this;
    }
  }, {
    key: 'log',
    value: function log() {

      //const callInfo = callsite()
      //this.logger.apply(this.debugModule, args)
      Console.log.apply(Console, arguments);

      // Print file location.
      if (global.__CLIENT__) {
        if (useIdeLink) {

          // Source maps not working with new Error().stack.
          // https://bugs.chromium.org/p/chromium/issues/detail?id=357958

          // Hangs browser.
          //getCallerFileAsync(1).then((callInfo) => {
          //  Console.log('  ' + chalk.gray(makeIDELink(callInfo)))
          //})

        }
      }
      // ---

      return this;
    }

    // TODO(vjpr): With iTerm2, don't need to make hyperlink anymore.
    //
    // E.g.
    //
    // app/registry.js Generator cached hit for key: package-json!/Users/Vaughan/dev-live-test +0ms
    // app/registry.js   idea://open?file=/Users/Vaughan/dev-live/drum/lib/app/registry.js&line=229:24 +2ms
    //

  }, {
    key: 'debug',
    value: function debug() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // TODO(vjpr): We need to use a stacktrace-js source cache if we are to do this.
      //const useAsyncStackTrace = !detectNode
      var useAsyncStackTrace = false;

      if (useAsyncStackTrace) {
        (0, _liveCaller.getCallerFileAsync)(1).then(function (callInfo) {
          run(callInfo);
        });
        return;
      } else {
        // TODO(vjpr): This may slow things down a lot!
        //   And causing a max call stack exceeded...
        var callInfo = (0, _liveCaller.getCallerFile)(1);
        return run(callInfo);
      }

      function run(callInfo) {

        var logger = getDebugModule(callInfo);
        logger.apply(logger, args);

        if (useIdeLink && callInfo) {
          logger.apply(logger, ['  ' + _chalk2.default.gray((0, _liveCaller.makeIDELink)(callInfo))]);
        }

        return this;
      }
    }
  }, {
    key: 'error',
    value: function error() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      Console.error(_nodeEmoji2.default.get(':no_entry_sign:') + _chalk2.default.red.apply(_chalk2.default, ['  ERROR:'].concat(args)));
      return this;
    }
  }, {
    key: 'warn',
    value: function warn() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      Console.warn(_nodeEmoji2.default.get(':warning:') + _chalk2.default.yellow.apply(_chalk2.default, ['  WARNING:'].concat(args)));
      return this;
    }
  }, {
    key: 'info',
    value: function info() {
      Console.log(_chalk2.default.cyan.apply(_chalk2.default, arguments));
      return this;
    }
  }]);
  return Logger;
}()) || _class;

function printFileStr(file) {
  return _chalk2.default.dim((0, _tildify2.default)(file));
}

// Legacy
// TODO: Maybe don't cache the logger so it creates an instance each time
//  and uses the callsite to get the name of the module.

////////////////////////////////////////////////////////////////////////////////
// Singleton API
////////////////////////////////////////////////////////////////////////////////

// TODO(vjpr): Include usage information from configurize.

var singleton = new Logger();

exports.Console = Console;
var info = exports.info = singleton.info;
var log = exports.log = singleton.log;
var debug = exports.debug = singleton.debug;
var warn = exports.warn = singleton.warn;
var error = exports.error = singleton.error;
var time = exports.time = console.time;
var timeEnd = exports.timeEnd = console.timeEnd;
exports.logger = singleton;
exports.Logger = Logger;
exports.default = singleton;

////////////////////////////////////////////////////////////////////////////////
//# sourceMappingURL=index.js.map
