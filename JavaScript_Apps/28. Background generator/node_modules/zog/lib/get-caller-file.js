'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _stackTrace = require('stack-trace');

var _stackTrace2 = _interopRequireDefault(_stackTrace);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getCallerFile = function getCallerFile() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? { index: 2 } : arguments[0];

  //console.trace()
  //const f = _.find(stackTrace.get(), (v) => {
  //  return !v.getFileName().match('babel-core') && !v.getFileName().match('core-js')
  //})
  //console.log(f.getFileName())

  var frame = _stackTrace2.default.get()[opts.index];
  var file = _path2.default.relative(process.cwd(), frame.getFileName());
  var dir = _path2.default.dirname(file);
  var ext = _path2.default.extname(file);
  var base = _path2.default.basename(file, ext);
  var line = frame.getLineNumber();
  var functionName = frame.getFunctionName();
  var methodName = frame.getMethodName();
  var className = _lodash2.default.get(frame, 'receiver.name');
  var methodString = methodName != null ? ' (' + methodName + ')' : '';
  var parts = dir.split('/');
  var dirString = '';
  var ref = parts.slice(0, -1);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)(ref.entries()), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = (0, _slicedToArray3.default)(_step.value, 2);

      var i = _step$value[0];
      var part = _step$value[1];

      console.log([part, i]);
      if (part === '..') continue;
      dirString += part + '.';
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return '' + dirString + base + '#' + line + methodString;
}; //config = require('config')()
exports.default = getCallerFile;
module.exports = exports['default'];
//# sourceMappingURL=get-caller-file.js.map
